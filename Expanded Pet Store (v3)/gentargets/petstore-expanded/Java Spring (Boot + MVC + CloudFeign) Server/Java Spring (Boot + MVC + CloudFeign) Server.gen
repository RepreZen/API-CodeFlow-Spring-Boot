---
name: "Java Spring (Boot + MVC + CloudFeign) Server"
genTemplateId: "com.modelsolv.reprezen.gentemplates.openapi.generator.SpringCodegen"
relativeOutputDir: ../../../implementation/springboot-petstore-demo
prerequisites: null
primarySource: 
  path: "../../../models/petstore-expanded.yaml"
namedSources: null 
# The parameters object contains variables that are processed directly by the GenTemplate.
parameters: 
  # Sort method arguments to place required parameters before optional parameters.
  sortParamsByRequiredFlag: null
  
  # Whether to ensure parameter names are unique in an operation (rename parameters that are not).
  ensureUniqueParams: null
  
  # boolean, toggles whether unicode identifiers are allowed in names or not, default is false
  allowUnicodeIdentifiers: null
  
  # Add form or body parameters to the beginning of the parameter list.
  prependFormOrBodyParameters: null
  
  # package for generated models
  modelPackage: com.reprezen.demo.springboot.model
  
  # package for generated api classes
  apiPackage: com.reprezen.demo.springboot.api
  
  # root package for generated code
  invokerPackage: com.reprezen.demo.springboot
  
  # groupId in generated pom.xml
  groupId: com.reprezen.demo
  
  # artifactId in generated pom.xml
  artifactId: petstore-demo
  
  # artifact version in generated pom.xml
  artifactVersion: null
  
  # artifact URL in generated pom.xml
  artifactUrl: null
  
  # artifact description in generated pom.xml
  artifactDescription: "Demontration of the Contract-as-Code approach with Spring Boot artifacts generated from an OpenAPI3 doc"
  
  # SCM connection in generated pom.xml
  scmConnection: null
  
  # SCM developer connection in generated pom.xml
  scmDeveloperConnection: null
  
  # SCM URL in generated pom.xml
  scmUrl: null
  
  # developer name in generated pom.xml
  developerName: null
  
  # developer email in generated pom.xml
  developerEmail: null
  
  # developer organization in generated pom.xml
  developerOrganization: null
  
  # developer organization URL in generated pom.xml
  developerOrganizationUrl: null
  
  # The name of the license
  licenseName: null
  
  # The URL of the license
  licenseUrl: null
  
  # source folder for generated code
  sourceFolder: null
  
  # prefix for generated code members and local variables
  localVariablePrefix: null
  
  # boolean - toggle "implements Serializable" for generated models
  serializableModel: null
  
  # Treat BigDecimal values as Strings to avoid precision loss.
  bigDecimalAsString: null
  
  # whether to use fully qualified name for classes under java.util. This option only works for Java API client
  fullJavaUtil: null
  
  # hides the timestamp when files were generated
  hideGenerationTimestamp: true
  
  # whether to include support for application/xml content type and include XML annotations in the model (works with libraries that provide support for JSON and XML)
  withXml: null
  
  # Option. Date library to use
  dateLibrary: null
  
  # Option. Use Java8 classes instead of third party equivalents
  java8: false
  
  # server title name or client service name
  title: null
  
  # configuration package for generated code
  configPackage: com.reprezen.demo.springboot.swaggerui
  
  # base package (invokerPackage) for generated code
  basePackage: com.reprezen.demo.springboot
  
  # Whether to generate only API interface stubs without the server files.
  interfaceOnly: false
  
  # Whether to generate the server files using the delegate pattern
  delegatePattern: true
  
  # Whether to select only one produces/consumes content-type by operation.
  singleContentTypes: null
  
  # use async Callable controllers
  async: null
  
  # wrap responses in Mono/Flux Reactor types (spring-boot only)
  reactive: null
  
  # wrap the responses in given type (Future,Callable,CompletableFuture,ListenableFuture,DeferredResult,HystrixCommand,RxObservable,RxSingle or fully qualified type)
  responseWrapper: null
  
  # use tags for creating interface and controller classnames
  useTags: null
  
  # Use BeanValidation API annotations
  useBeanValidation: null
  
  # Use of @ApiImplicitParams for headers.
  implicitHeaders: null
  
  # Generate Spring OpenAPI Docket configuration class.
  swaggerDocketConfig: null
  
  # Use Optional container for optional parameters
  useOptional: null
  
  # library template (sub-template) to use
  library: null
  
  # Contents of OpenAPI Generator configuration file.
  # This is the file that would be passed with --config option on OpenAPI Generator commandline.
  # The JSON contents of that file should be the value of this parameter.
  # This parameter need not be used. If it is absent, all string-valued parameters are collected into
  # a map that is then passed to the OpenAPI Generator module. If a map is provided here, then string-valued
  # parameters are still copied in, overriding like-named values appearing in the map.
  openApiCodegenConfig: 
    hideGenerationTimestamp: true
    delegatePattern: true
    # the java8 option generates default methods in interfaces which. Because of it, unimplemented methods in interface implementations will NOT be detected by the compiler.  
    java8: false
  
  # System properties to set, as in the -D option of OpenAPI Generatorcommand line.
  # Each property should be a json object with a name/value pair for each property.
  # Example: for '-Dmodels -Dapis=User,Pets' use the following:
  # value:
  #   models: ''
  #   apis: Users,Pets
  openApiCodegenSystemProperties: null
